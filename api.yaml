swagger: "2.0"
info:
  title: Content API
  description: This is my case-solution API Documentation
  version: 1.0
  contact:
  liscence:
    name: Apache 2.0
    url: "http://www.apache.org/liscences/LIS"
  servers:
    -url: http://localhost:5000
    description: THis is my local Server
schemes: [http]
securityDefinitions:
 Bearer:
  type: apiKey
  name: Authorization
  in: header
  scheme: bearer
tags:
  name: Content
  description: The contents managing API
  name: Admin
  description: Admin managing API

paths:
  /content:
    post:
      summary: Create a new content
      tags: [Content]
      produces:
        - application/json
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/components/schemas/Content"
      responses:
        "200":
          description: Content was created successfully !


  /contents:
    get:
      summary: show all content records.
      tags: [Content]
      produces:
        - application/json
      consumes:
        - application/json
      security:
        - Bearer: []
      responses:
        "200":
          description: OK

  /content/{id}:
    get:
      summary: show the content detail.
      tags: [Content]
      produces:
        - application/json
      consumes:
        - application/json
      security:
          - Bearer: []
      parameters:
        - in: path
          name: id
          required: true
          description: content id
          type: string
      responses:
        "200":
          description: OK
    patch:
      summary: update content
      tags: [Content]
      produces:
        - application/json
      consumes:
        - application/json
      security:
          - Bearer: []
      parameters:
        - in: path
          name: id
          required: true
          description: content id
          type: string
        - in: body
          name: body
          required: true
          type: object
      responses:
        "200":
          description: Content was updated successfully!

    delete:
      summary: delete content
      tags: [Content]
      produces:
        - application/json
      consumes:
        - application/json
      security:
          - Bearer: []
      parameters:
        - in: path
          name: id
          required: true
          description: content id
          type: string
      responses:
        "200":
          description: Content was deleted successfully!



  /content/{id}/season:
    put:
      summary: Add a new season to the seasons section of the content
      tags: [Content]
      produces:
        - application/json
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: path
          name: id
          required: true
          description: content id
          type: string
        - in: body
          name: body
          required: true
          type: string
          schema:
            $ref: "#/components/schemas/addSeason"
      responses:
        "200":
          description: New season added successfully !

  /content/{id}/season/{seasonIndex}/episode:
    put:
      summary: Add a new episode inside a specific season within a content
      tags: [Content]
      produces:
        - application/json
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: path
          name: id
          required: true
          description: content id
          type: string
        - in: path
          name: seasonIndex
          required: true
          description: season number
          type: string
        - in: body
          name: body
          required: true
          type: string
          schema:
            $ref: "#/components/schemas/addEpisode"
      responses:
        "200":
          description: New episode added successfully !


  # /content/{id}:
  #   patch:
  #     summary: Update properties inside content
  #     tags: [Content]
  #     produces:
  #       - application/json
  #     consumes:
  #       - application/json
  #     security:
  #       - Bearer: []
  #     parameters:
  #     - in: path
  #       name: id
  #       required: true
  #       type: string
  #     responses:
  #       "200":
  #         description: OK

  # /content/{id}:
  #   delete:
  #     summary: Delete content
  #     tags: [Content]
  #     produces:
  #       - application/json
  #     consumes:
  #       - application/json
  #     security:
  #       - Bearer: []
  #     parameters:
  #       - in: path   
  #         name: id
  #         required: true
  #         type: string
  #     responses:
  #       "200":
  #         description: Content was deleted successfully!
  


  /auth/signup:
    post:
      summary: Create a new Admin
      tags: [Admin]
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/components/schemas/signupAdmin"
      responses:
        "200":
          description: Admin was created successfully !


  /auth/signin:
    post:
      summary: Login
      tags: [Admin]
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/components/schemas/signinAdmin"
      responses:
        "200":
          description: Admin was logged in!

  /auth/delete/{id}:
    delete:
      summary: Delete the admin
      tags: [Admin]
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          required: true
          description: content id
          type: string
      responses:
        "200":
          description: Admin was deleted successfully!



components:
  schemas:
    Content:
      type: object
      properties:
        type:
          type: string
        name:
          type: string
        description:
          type: string
        releaseYear:
          type: number
        seasons:
          type: array
          items:
            type: object
            properties:
              seasonName:
                type: string
              episodes:
                type: array
                items:
                  type: object
                  properties:
                    episodeName:
                      type: string
    signupAdmin:
      type: object
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
        phoneNumber:
          type: string
        photoUrl:
          type: string
        birthDay:
          type: string
          format: date
    signinAdmin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    addSeason:
      type: array
      items:
        type: object
        properties:
          seasonName:
            type: string
    addEpisode:
      type: array
      items:
        type: object
        properties:
          episodeName:
            type: string
  
  